
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
/*import java.net.NoRouteToHostException;

import static java.awt.BorderLayout.NORTH;
import static javax.swing.SwingConstants.*;*/
public class FenetreJeu extends JPanel implements KeyListener{

        private Configuration terrain;
        private int tailleCase = 25;
        private int hauteur, largeur;
        private int size=100;
        private JFrame frame;
        private Image player;
	Stack<Position> historiquePositions ;

        public FenetreJeu(Configuration t) {
            this.hauteur = t.getNiveau().getY();
            this.largeur = t.getNiveau().getX();
            this.terrain = t;
	    Stack<Position> historiquePositions = new Stack<>();

            setBackground(Color.BLACK);
            setPreferredSize(new Dimension(largeur * tailleCase, hauteur * tailleCase+32));
            this.setBounds(0,0,largeur*tailleCase,hauteur*tailleCase);
            JFrame frame = new JFrame("Sokob");
            this.frame = frame;
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

            frame.getContentPane().add(this);
            frame.pack();
            frame.setVisible(true);
            frame.addKeyListener(this);

        }
        public JFrame getFrame(){
            return this.frame;
        }

        public void paintComponent(Graphics g) {
            super.paintComponent(g);
            Graphics2D g2d = (Graphics2D) g;
            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            player=new ImageIcon("playerimg.png").getImage();
            //parcourt toutes les cases
            for (int l = 0; l < this.hauteur; l++) {
                for (int c = 0; c < this.largeur; c++) {
                    Position p=new Position(l,c);
                    Element tmp = terrain.get(p);
                    if (tmp instanceof Immobile) {
                        if( tmp.getType().name().equals("MUR")){
                            g2d.setColor(new Color(132,46,27));
                            g2d.fillRoundRect(l*size, c*size, size, size, 20, 20);
                            //g.setColor(Color.GRAY);
                            //g.fillRect(cc.col*tailleCase,cc.lig*tailleCase,tailleCase,tailleCase);
                        }
                        if(terrain.estCible(p)) {
                            g2d.setColor(Color.white);
                            g2d.fillRoundRect(l * size, c * size, size, size, 20, 20);
                        }
                    }
                    if (tmp instanceof Mobile) {

                        if(terrain.estJoueur(p)){
                            
                            g2d.setColor(Color.GREEN);
                            g2d.fillOval(l*size, c*size, 20, 20);
                        }
                        if(tmp.getType().name().equals("CAISSE")){
                            g2d.setColor(Color.yellow);
                            g2d.fillRoundRect(l*size, c*size, size, size, 20, 20);

                        }
                    }

                }
            }
      

        }
        
        }
       public void afficherDebutJeu() {
    // Création du titre "SOKOBAN"
    JLabel titre = new JLabel("SOKOBAN");
    titre.setFont(new Font("Arial", Font.BOLD, 50));
    titre.setHorizontalAlignment(JLabel.CENTER);
    
    // Chargement de l'image de Sokoban
    ImageIcon image = new ImageIcon("chemin/vers/image/sokoban.png");
    JLabel imageLabel = new JLabel(image);
    
    // Création du bouton "Start"
    JButton boutonStart = new JButton("Start");
    boutonStart.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e) {
            if(e.getsource()==boutonStart){
		selclevel();
	}
        }
    });
    
    // Ajout des éléments à la fenêtre
    getContentPane().setLayout(new BorderLayout());
    getContentPane().add(titre, BorderLayout.NORTH);
    getContentPane().add(imageLabel, BorderLayout.CENTER);
    getContentPane().add(boutonStart, BorderLayout.SOUTH);
    pack();
    setVisible(true);
}
                @Override
                public void mousePressed(MouseEvent e) {

                }

                @Override
                public void mouseReleased(MouseEvent e) {

                }

                @Override
                public void mouseEntered(MouseEvent e) {

                }

                @Override
                public void mouseExited(MouseEvent e) {

                }
            });
            frame.repaint();

        }

        @Override
        public void keyTyped(KeyEvent e) {

        }
        @Override
        public void keyPressed(KeyEvent e) {
           
            switch(e.getKeyCode()) {
                case KeyEvent.VK_LEFT:System.out.println("left");historiquePositions.push(terrain.getJoueur().getPosition());terrain.getJoueur().bougerVers(Direction.Gauche);
                    frame.repaint();break;
                case KeyEvent.VK_RIGHT:System.out.println("right");historiquePositions.push(terrain.getJoueur().getPosition()); terrain.getJoueur().bougerVers(Direction.Droite);
                    frame.repaint();break;
                case KeyEvent.VK_UP:System.out.println("up");historiquePositions.push(terrain.getJoueur().getPosition());terrain.getJoueur().bougerVers(Direction.Haut);
                    frame.repaint();break;
                case KeyEvent.VK_DOWN:System.out.println("down");historiquePositions.push(terrain.getJoueur().getPosition()); terrain.getJoueur().bougerVers(Direction.Bas);
                    frame.repaint();break;
                case KeyEvent.VK_Z:
    			if (e.isControlDown() && !historiquePositions.empty()) {
        		Position posPrecedente = historiquePositions.pop();
        		terrain.getJoueur().setPosition(posPrecedente);
        		frame.repaint();
    			}
    			break;
            }

            }

        @Override
        public void keyReleased(KeyEvent e) {

        }

    }
   

